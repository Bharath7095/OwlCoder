class Solution {
public:
    vector<int> survivedRobotsHealths(vector<int>& positions, vector<int>& healths, string directions) {
        stack<int>st;
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        for(int i=0;i<positions.size();i++){
            pq.push({positions[i],i});
        }
        while(!pq.empty()){
            int i=pq.top().second;
            pq.pop();
            if(directions[i]=='R') st.push(i);
            else{
                while(!st.empty() and healths[i]>0){
                    int x=st.top();
                    st.pop();
                    if(healths[x]>healths[i]){
                        healths[i]=0;
                        healths[x]-=1;
                        st.push(x);
                    }
                    else if(healths[x]==healths[i]){
                        healths[i]=0;
                        healths[x]=0;
                    }
                    else{
                        healths[x]=0;
                        healths[i]-=1;
                    }
                }
            }
        }
        vector<int>ans;
        for(int i=0;i<healths.size();i++){
            if(healths[i]!=0) ans.push_back(healths[i]);
        }
        return ans;
    }
};
